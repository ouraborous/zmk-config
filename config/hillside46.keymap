/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"

&mt {
  flavor = "balanced";
  quick-tap-ms = <175>;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <175>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <175>;                  \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {

            display-name = "Base";
            bindings = <
&gresc    &kp Q        &kp W         &kp E         &kp R         &kp T                     &kp Y    &kp U         &kp I        &kp O         &kp P           &kp MINUS
&kp LBRC  &hml LGUI A  &hml LCTRL S  &hml LALT D   &hml LSHFT F  &kp G                     &kp H    &hmr RSHFT J  &hmr RALT K  &hmr RCTRL L  &hmr RGUI SEMI  &kp SQT
&kp RBRC  &kp Z        &kp X         &kp C         &kp V         &kp B       &none  &none  &kp N    &kp M         &kp COMMA    &kp DOT       &kp  FSLH       &kp BSLH
                       &none         &caps_word    &lt 1 TAB     &lt 2 SPACE               &kp RET  &lt 1 BSPC    &mo 3        &none
            >;
        };

        raise_layer {

            display-name = "Sym";
            bindings = <
&kp GRAVE  &bt BT_CLR_ALL  &kp EXCLAMATION  &kp AT_SIGN   &kp POUND  &none                &kp N0  &kp N1  &kp N2  &kp N3  &none   &trans
&kp LPAR   &kp PLUS        &kp DOLLAR       &kp PERCENT   &kp CARET  &none                &none   &kp N4  &kp N5  &kp N6  &trans  &trans
&kp RPAR   &kp EQUAL       &kp AMPERSAND    &kp ASTERISK  &none      &none  &none  &none  &none   &kp N7  &kp N8  &kp N9  &trans  &trans
                           &none &trans           &trans        &trans     &trans   &trans  &trans &none
            >;
        };

        lower_layer {

            display-name = "Mov";
            bindings = <
&kp GRAVE  &trans  &trans  &trans   &trans   &trans                &kp INSERT  &kp SCROLLLOCK  &kp PAUSE_BREAK  &none      &none   &kp DELETE
&trans     &trans  &trans  &trans   &trans   &trans                &kp LEFT    &kp DOWN        &kp UP           &kp RIGHT  &trans  &trans
&trans     &trans  &trans  &trans   &trans   &trans    &none &none &kp HOME    &kp PAGE_DOWN   &kp PAGE_UP      &kp END    &trans  &trans
                          &none &trans  &trans  &trans    &trans      &trans          &trans &none
            >;
        };

        layer_3 {

            display-name = "Media";
            bindings = <
&kp GRAVE  &kp K_SLEEP  &none          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none                          &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL
&trans     &trans       &kp LS(LG(W))  &kp K_VOLUME_DOWN     &kp K_VOLUME_UP       &kp K_MUTE                     &none       &out OUT_USB  &out OUT_BLE  &out OUT_TOG  &trans        &trans
&trans     &trans       &kp K_STOP     &kp K_PREVIOUS        &kp K_NEXT            &kp K_PLAY_PAUSE &none &none   &none       &none         &none         &none         &trans        &trans
                                       &none &trans                &trans                &trans              &trans     &trans        &trans &none
            >;
        };

    };
};
